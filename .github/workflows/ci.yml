name: CI - Build and Test

on:
  push:
  pull_request:
    branches: [ main ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [20, 22]
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Lint Frontend
      run: npm run lint
      
    - name: Build All Components
      run: npm run build
      
    - name: Run API Tests with Coverage
      run: npm run test:coverage --workspace=backend
      
    - name: Generate Coverage Badge
      id: coverage
      run: |
        # Check if coverage file exists, if not set default values
        if [ -f "backend/coverage/coverage-summary.json" ]; then
          COVERAGE=$(cat backend/coverage/coverage-summary.json | jq -r '.total.lines.pct // 0')
        else
          echo "⚠️ Coverage summary not found, checking for coverage files..."
          ls -la backend/coverage/ || echo "No coverage directory found"
          COVERAGE="0"
        fi
        
        echo "coverage=$COVERAGE" >> $GITHUB_OUTPUT
        
        # Create coverage badge color based on percentage
        if (( $(echo "$COVERAGE >= 80" | bc -l) )); then
          echo "color=brightgreen" >> $GITHUB_OUTPUT
        elif (( $(echo "$COVERAGE >= 60" | bc -l) )); then
          echo "color=yellow" >> $GITHUB_OUTPUT
        else
          echo "color=red" >> $GITHUB_OUTPUT
        fi
        
    - name: Upload Coverage Reports
      uses: actions/upload-artifact@v4
      with:
        name: coverage-reports-node-${{ matrix.node-version }}
        path: |
          backend/coverage/
        retention-days: 30
        
    - name: Generate Test Summary
      if: matrix.node-version == '20'  # Only run once
      run: |
        # Start the summary
        echo "# 🚀 OctoCAT Supply Chain - Build & Test Results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## 📊 Test Coverage Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "![Coverage](https://img.shields.io/badge/Coverage-${{ steps.coverage.outputs.coverage }}%25-${{ steps.coverage.outputs.color }})" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Add coverage table if available
        if [ -f "backend/coverage/coverage-summary.json" ]; then
          echo "### 📈 Coverage Breakdown" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Metric | Coverage | Covered | Total |" >> $GITHUB_STEP_SUMMARY
          echo "|--------|----------|---------|-------|" >> $GITHUB_STEP_SUMMARY
          
          # Extract coverage data and format as table
          LINES_PCT=$(cat backend/coverage/coverage-summary.json | jq -r '.total.lines.pct // "0"')
          LINES_COVERED=$(cat backend/coverage/coverage-summary.json | jq -r '.total.lines.covered // "0"')
          LINES_TOTAL=$(cat backend/coverage/coverage-summary.json | jq -r '.total.lines.total // "0"')
          
          STATEMENTS_PCT=$(cat backend/coverage/coverage-summary.json | jq -r '.total.statements.pct // "0"')
          STATEMENTS_COVERED=$(cat backend/coverage/coverage-summary.json | jq -r '.total.statements.covered // "0"')
          STATEMENTS_TOTAL=$(cat backend/coverage/coverage-summary.json | jq -r '.total.statements.total // "0"')
          
          FUNCTIONS_PCT=$(cat backend/coverage/coverage-summary.json | jq -r '.total.functions.pct // "0"')
          FUNCTIONS_COVERED=$(cat backend/coverage/coverage-summary.json | jq -r '.total.functions.covered // "0"')
          FUNCTIONS_TOTAL=$(cat backend/coverage/coverage-summary.json | jq -r '.total.functions.total // "0"')
          
          BRANCHES_PCT=$(cat backend/coverage/coverage-summary.json | jq -r '.total.branches.pct // "0"')
          BRANCHES_COVERED=$(cat backend/coverage/coverage-summary.json | jq -r '.total.branches.covered // "0"')
          BRANCHES_TOTAL=$(cat backend/coverage/coverage-summary.json | jq -r '.total.branches.total // "0"')
          
          echo "| 📝 Lines | ${LINES_PCT}% | ${LINES_COVERED} | ${LINES_TOTAL} |" >> $GITHUB_STEP_SUMMARY
          echo "| 📋 Statements | ${STATEMENTS_PCT}% | ${STATEMENTS_COVERED} | ${STATEMENTS_TOTAL} |" >> $GITHUB_STEP_SUMMARY
          echo "| 🔧 Functions | ${FUNCTIONS_PCT}% | ${FUNCTIONS_COVERED} | ${FUNCTIONS_TOTAL} |" >> $GITHUB_STEP_SUMMARY
          echo "| 🌳 Branches | ${BRANCHES_PCT}% | ${BRANCHES_COVERED} | ${BRANCHES_TOTAL} |" >> $GITHUB_STEP_SUMMARY
          
        else
          echo "### ⚠️ Coverage Details" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Coverage summary not available - ensure tests are running with coverage enabled" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## 🏗️ Build Status" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| Component | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|-----------|---------|" >> $GITHUB_STEP_SUMMARY
        echo "| API | ✅ Built successfully |" >> $GITHUB_STEP_SUMMARY
        echo "| Frontend | ✅ Built successfully |" >> $GITHUB_STEP_SUMMARY
        echo "| Linting | ✅ Passed |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## 🧪 Test Results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "- **API Tests**: All tests passed with ${{ steps.coverage.outputs.coverage }}% coverage" >> $GITHUB_STEP_SUMMARY
        echo "- **Node.js Versions**: Tested on Node.js 20 & 22" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## 📁 Project Structure" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "- **API**: TypeScript Express.js REST API with Swagger documentation" >> $GITHUB_STEP_SUMMARY
        echo "- **Frontend**: React 18+ with TypeScript, Vite, and Tailwind CSS" >> $GITHUB_STEP_SUMMARY
        echo "- **Testing**: Vitest with coverage reporting" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "---" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "Built with ❤️ using GitHub Copilot 🤖" >> $GITHUB_STEP_SUMMARY
        
    - name: Comment Coverage on PR
      if: github.event_name == 'pull_request' && matrix.node-version == '20'
      uses: actions/github-script@v7
      with:
        script: |
          const coverage = '${{ steps.coverage.outputs.coverage }}';
          const color = '${{ steps.coverage.outputs.color }}';
          const coverageBadge = `![Coverage](https://img.shields.io/badge/Coverage-${coverage}%25-${color})`;
          
          const comment = `## 📊 Test Coverage Report
          
          ${coverageBadge}
          
          **Coverage**: ${coverage}%
          
          ### Summary
          - ✅ All builds completed successfully
          - ✅ All tests passed
          - ✅ Code coverage: ${coverage}%
          
          <details>
          <summary>📁 View detailed coverage report</summary>
          
          Coverage artifacts are available in the workflow run.
          
          </details>`;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });